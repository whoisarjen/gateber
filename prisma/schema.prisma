// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    title      String
    content Json
    isPublic Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@index([title])
    @@index([userId])
}

model Follower {
    id        Int      @id @default(autoincrement())
    isPushNotification Boolean @default(true)
    isEmailNotification Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    user      User     @relation("following", fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    follower  User     @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
    followerId String @unique

    @@index([userId, followerId])
    @@unique([userId, followerId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    following   Follower[]   @relation("following")
    followers   Follower[]  @relation("followers")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    @@unique([identifier, token])
}
