// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    title     String
    content   Json
    isPublic  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@index([title])
    @@index([userId])
}

model Follower {
    id                  Int     @id @default(autoincrement())
    isPushNotification  Boolean @default(true)
    isEmailNotification Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user   User   @relation("followers", fields: [userId], references: [id], onDelete: Cascade)
    userId String

    author   User   @relation("authors", fields: [authorId], references: [id], onDelete: Cascade)
    authorId String @unique

    @@unique([userId, authorId])
    @@index([userId, authorId])
}

// Necessary for Next auth
model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @default(now()) @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt

    @@index([userId])
}

model User {
    id                  String     @id @default(cuid())
    name                String?
    email               String?    @unique
    emailVerified       DateTime?
    image               String?
    notificationsNumber Int        @default(0)
    accounts            Account[]
    sessions            Session[]
    posts               Post[]
    followers           Follower[] @relation("followers")
    authors             Follower[] @relation("authors")
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @default(now()) @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    @@unique([identifier, token])
}
